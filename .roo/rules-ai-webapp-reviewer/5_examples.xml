<examples>
  <example name="complex_react_component_analysis">
    <description>Analysis of a large React component with multiple issues</description>
    <input_description>A 350-line React component with mixed concerns, poor CSS organization, and performance issues</input_description>
    <sample_output><![CDATA[
# üîç AI Webapp Review: /docs/ComplexDashboard.mdx

## üìä Component Architecture Analysis

### Current Structure
```mermaid
graph TD
    A[ComplexDashboard] --> B[HeaderSection]
    A --> C[ContentArea]
    A --> D[SidebarPanel]
    B --> E[UserInfo]
    B --> F[NavigationMenu]
    C --> G[DataTable]
    C --> H[ChartsContainer]
    D --> I[FilterControls]
    D --> J[ActionButtons]
```

### Issues Identified

#### üî¥ Critical Issues
- **Monolithic Component**: 350+ lines in single component
- **Mixed Concerns**: UI logic, data fetching, and styling in one file
- **Memory Leaks**: Missing cleanup in useEffect hooks
- **Poor CSS Organization**: Global styles conflicting with component styles

#### üü° Performance Issues
- **No Memoization**: Components re-rendering unnecessarily
- **Blocking Operations**: Synchronous data processing in render
- **Large Bundle Impact**: 45KB component with embedded assets

#### üü¢ Accessibility Concerns
- **Missing ARIA Labels**: Interactive elements lack proper labeling
- **Keyboard Navigation**: Focus management not implemented
- **Color Contrast**: Several text elements below WCAG standards

## ‚úÖ Refactoring Task List

### Phase 1: Structural Improvements (High Priority)
- [ ] Split ComplexDashboard into 5 smaller components
- [ ] Extract data fetching logic into custom hooks
- [ ] Implement proper error boundaries
- [ ] Add loading states for better UX

### Phase 2: Performance Optimization (Medium Priority)
- [ ] Add React.memo to prevent unnecessary re-renders
- [ ] Implement lazy loading for ChartsContainer
- [ ] Convert synchronous operations to async patterns
- [ ] Optimize CSS delivery and reduce bundle size

### Phase 3: Code Quality (Medium Priority)
- [ ] Convert global CSS to CSS Modules
- [ ] Implement consistent naming conventions
- [ ] Add TypeScript interfaces for props
- [ ] Create comprehensive unit tests

### Phase 4: Accessibility & Polish (Low Priority)
- [ ] Add ARIA labels to all interactive elements
- [ ] Implement proper focus management
- [ ] Test with screen readers
- [ ] Add skip links for keyboard navigation

## üõ†Ô∏è Recommended Refactoring Patterns

### Before: Monolithic Component
```javascript
function ComplexDashboard() {
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(true);
  const [user, setUser] = useState(null);

  useEffect(() => {
    fetchData().then(setData);
    fetchUser().then(setUser).finally(() => setLoading(false));
  }, []);

  // 300+ lines of mixed logic...
}
```

### After: Composed Components
```javascript
function ComplexDashboard() {
  return (
    <div className={styles.container}>
      <DashboardHeader />
      <DashboardContent />
      <DashboardSidebar />
    </div>
  );
}

function DashboardContent() {
  const { data, loading } = useDashboardData();
  const user = useUserProfile();

  if (loading) return <LoadingSpinner />;

  return (
    <main>
      <DataTable data={data} />
      <UserProfile user={user} />
    </main>
  );
}
```

## üìà Impact Assessment

### Current Metrics
- **Bundle Size**: 45KB (uncompressed)
- **Render Time**: 1200ms (first load)
- **Accessibility Score**: 65/100
- **Maintainability Index**: 42/100

### Projected Improvements
- **Bundle Size**: 28KB (-38% reduction)
- **Render Time**: 450ms (-62% improvement)
- **Accessibility Score**: 95/100 (+46% improvement)
- **Maintainability Index**: 78/100 (+86% improvement)

## üéØ Next Steps

1. **Immediate Actions**: Split the monolithic component
2. **Short-term**: Implement performance optimizations
3. **Medium-term**: Add comprehensive testing
4. **Long-term**: Consider micro-frontend architecture

---
*Analysis generated by üîç AI Webapp Reviewer Mode*
    ]]></sample_output>
  </example>

  <example name="css_conflict_resolution">
    <description>Analysis of CSS organization and conflict resolution</description>
    <input_description>A webapp with conflicting global styles and poor CSS architecture</input_description>
    <sample_output><![CDATA[
# üé® CSS Architecture Review: StyleConflicts.mdx

## üîç CSS Organization Analysis

### Current CSS Architecture
```mermaid
graph TD
    A[Global Styles] --> B[main.css]
    A --> C[components.css]
    A --> D[utilities.css]
    B --> E[Body Styles]
    B --> F[Typography]
    C --> G[Button Styles]
    C --> H[Card Styles]
    D --> I[Margin Utilities]
    D --> J[Color Utilities]
```

### Conflicts Detected

#### Global vs Component Styles
- **Conflict**: `.button` defined in both global and component CSS
- **Specificity War**: Component styles overridden by global styles
- **Cascade Issues**: Unexpected inheritance affecting child elements

#### Unused CSS Analysis
- **Dead Code**: 34% of CSS rules unused in current implementation
- **Redundant Rules**: Multiple rules targeting same elements
- **Outdated Selectors**: References to removed HTML elements

## ‚úÖ CSS Optimization Checklist

### Phase 1: Conflict Resolution
- [ ] Audit all CSS conflicts and specificity issues
- [ ] Implement CSS Modules for component isolation
- [ ] Create consistent naming convention (BEM methodology)
- [ ] Remove all `!important` declarations

### Phase 2: Code Cleanup
- [ ] Remove unused CSS rules (34% reduction target)
- [ ] Consolidate duplicate style declarations
- [ ] Optimize CSS selectors for better performance
- [ ] Implement CSS custom properties for theming

### Phase 3: Architecture Improvement
- [ ] Create component-specific CSS modules
- [ ] Implement utility-first approach where appropriate
- [ ] Add CSS documentation and style guide
- [ ] Set up CSS linting and automated checks

## üõ†Ô∏è Recommended CSS Patterns

### Before: Conflicting Global Styles
```css
/* main.css */
.button {
  background: blue;
  color: white;
  padding: 10px;
}

.button:hover {
  background: darkblue;
}

/* component.css */
.button {
  background: green !important;  /* Conflict! */
  border-radius: 4px;
}
```

### After: CSS Modules Approach
```css
/* Button.module.css */
.button {
  background: var(--primary-color);
  color: white;
  padding: 0.625rem 1rem;
  border: none;
  border-radius: 0.25rem;
  cursor: pointer;
  transition: background-color 0.2s ease;
}

.button:hover {
  background: var(--primary-hover);
}

.button:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

/* Component usage */
import styles from './Button.module.css';

function Button({ children, disabled, ...props }) {
  return (
    <button
      className={styles.button}
      disabled={disabled}
      {...props}
    >
      {children}
    </button>
  );
}
```

## üìä CSS Metrics

### Current State
- **Total CSS Rules**: 847
- **Unused Rules**: 289 (34%)
- **Specificity Conflicts**: 23 instances
- **Global Overrides**: 15 `!important` declarations

### Optimization Targets
- **Target CSS Rules**: 554 (-35% reduction)
- **Unused Rules**: 0 (100% cleanup)
- **Specificity Conflicts**: 0 (eliminated)
- **Global Overrides**: 0 (removed)

## üéØ Implementation Strategy

1. **Audit Phase**: Map all CSS usage and conflicts
2. **Migration Phase**: Convert to CSS Modules incrementally
3. **Cleanup Phase**: Remove unused and duplicate rules
4. **Optimization Phase**: Implement performance best practices

---
*CSS Architecture Analysis by üîç AI Webapp Reviewer*
    ]]></sample_output>
  </example>

  <example name="performance_optimization_report">
    <description>Analysis of performance issues and optimization recommendations</description>
    <input_description>A webapp with slow loading times and poor performance metrics</input_description>
    <sample_output><![CDATA[
# ‚ö° Performance Analysis: SlowWebapp.mdx

## üìä Performance Metrics Overview

### Current Performance Issues
- **First Contentful Paint**: 3.2s (Target: <1.5s)
- **Time to Interactive**: 4.8s (Target: <3.0s)
- **Bundle Size**: 2.8MB (Target: <500KB)
- **Runtime Performance**: 45 FPS average (Target: 60 FPS)

## üîç Performance Bottleneck Analysis

### Bundle Size Issues
```mermaid
pie title Bundle Composition
    "Vendor Libraries" : 45
    "Application Code" : 30
    "Assets/Images" : 20
    "CSS/Styles" : 5
```

### Runtime Performance Issues
- **Excessive Re-renders**: Components updating unnecessarily
- **Blocking JavaScript**: Synchronous operations in main thread
- **Memory Leaks**: Event listeners and timers not cleaned up
- **Inefficient DOM Operations**: Direct DOM manipulation

## ‚úÖ Performance Optimization Checklist

### Phase 1: Bundle Optimization (High Impact)
- [ ] Implement code splitting with React.lazy()
- [ ] Remove unused dependencies and tree-shake imports
- [ ] Optimize images and compress assets
- [ ] Implement proper chunk splitting strategy

### Phase 2: Runtime Optimization (Medium Impact)
- [ ] Add React.memo to prevent unnecessary re-renders
- [ ] Implement useMemo and useCallback for expensive operations
- [ ] Convert synchronous operations to async patterns
- [ ] Optimize event handlers and DOM interactions

### Phase 3: Memory Management (Medium Impact)
- [ ] Clean up event listeners in useEffect cleanup
- [ ] Clear timers and intervals on component unmount
- [ ] Implement proper error boundaries
- [ ] Optimize state management patterns

### Phase 4: Network Optimization (Low Impact)
- [ ] Implement proper caching strategies
- [ ] Add service worker for offline functionality
- [ ] Optimize API calls and data fetching
- [ ] Implement progressive loading

## üõ†Ô∏è Performance Optimization Patterns

### Before: Blocking Operations
```javascript
function SlowComponent() {
  const [data, setData] = useState(null);

  useEffect(() => {
    // Blocking synchronous operation
    const result = expensiveCalculation(largeDataset);
    setData(result);
  }, []);

  return <div>{/* Heavy rendering */}</div>;
}
```

### After: Optimized Async Pattern
```javascript
function OptimizedComponent() {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const loadData = async () => {
      setLoading(true);
      try {
        // Non-blocking async operation
        const result = await expensiveCalculationAsync(largeDataset);
        setData(result);
      } finally {
        setLoading(false);
      }
    };

    loadData();
  }, []);

  if (loading) return <LoadingSpinner />;

  return <MemoizedHeavyComponent data={data} />;
}

// Memoized component to prevent re-renders
const MemoizedHeavyComponent = React.memo(function HeavyComponent({ data }) {
  return (
    <div>
      {/* Optimized rendering */}
    </div>
  );
});
```

## üìà Performance Projections

### Current Metrics
- **Bundle Size**: 2.8MB
- **First Paint**: 3.2s
- **Time to Interactive**: 4.8s
- **Runtime FPS**: 45

### Optimized Targets
- **Bundle Size**: 480KB (-83% reduction)
- **First Paint**: 0.8s (-75% improvement)
- **Time to Interactive**: 1.2s (-75% improvement)
- **Runtime FPS**: 60 (+33% improvement)

## üîß Implementation Priority

1. **Code Splitting**: Highest impact, immediate implementation
2. **Memoization**: Medium impact, easy to implement
3. **Bundle Analysis**: Identify largest optimization opportunities
4. **Progressive Loading**: Enhance perceived performance

---
*Performance Analysis by üîç AI Webapp Reviewer*
    ]]></sample_output>
  </example>

  <example name="accessibility_audit_report">
    <description>Analysis of accessibility issues and WCAG compliance</description>
    <input_description>A webapp with multiple accessibility barriers and compliance issues</input_description>
    <sample_output><![CDATA[
# ‚ôø Accessibility Audit: BarrierAnalysis.mdx

## üìä Accessibility Compliance Overview

### Current WCAG 2.1 Compliance Score: 4.2/10

### Major Issues Found
- **Missing Semantic HTML**: Improper use of divs instead of semantic elements
- **Poor Keyboard Navigation**: Focus management not implemented
- **Color Contrast Issues**: Multiple text elements below WCAG AA standards
- **Missing ARIA Labels**: Interactive elements lack proper labeling
- **Screen Reader Issues**: Content not properly exposed to assistive technologies

## üîç Detailed Accessibility Analysis

### Keyboard Navigation Issues
```mermaid
flowchart TD
    A[User Presses Tab] --> B{Current Focus}
    B --> C[Focusable Element]
    B --> D[Non-Focusable Element]
    C --> E[Visual Focus Indicator]
    D --> F[No Visual Feedback]
    E --> G[Good UX]
    F --> H[Confusing UX]
```

### Color Contrast Analysis
- **Header Text**: 3.2:1 (Required: 4.5:1) ‚ùå
- **Body Text**: 2.8:1 (Required: 4.5:1) ‚ùå
- **Link Text**: 2.1:1 (Required: 3:1) ‚ùå
- **Button Text**: 4.8:1 (Required: 4.5:1) ‚úÖ

## ‚úÖ Accessibility Improvement Checklist

### Phase 1: Semantic HTML (High Priority)
- [ ] Replace divs with semantic elements (header, nav, main, section, article)
- [ ] Add proper heading hierarchy (h1-h6)
- [ ] Implement landmark roles
- [ ] Use semantic form elements

### Phase 2: Keyboard Navigation (High Priority)
- [ ] Add visible focus indicators for all interactive elements
- [ ] Implement proper tab order
- [ ] Add skip links for main navigation
- [ ] Ensure all functionality is keyboard accessible

### Phase 3: Screen Reader Support (Medium Priority)
- [ ] Add ARIA labels to all interactive elements
- [ ] Implement ARIA live regions for dynamic content
- [ ] Provide alternative text for all images
- [ ] Test with screen readers (NVDA, JAWS, VoiceOver)

### Phase 4: Visual Accessibility (Medium Priority)
- [ ] Fix all color contrast issues
- [ ] Add focus indicators that meet contrast requirements
- [ ] Ensure sufficient touch target sizes (44px minimum)
- [ ] Implement reduced motion preferences

## üõ†Ô∏è Accessibility Implementation Patterns

### Before: Poor Semantic Structure
```html
<!-- Bad: Using divs everywhere -->
<div class="header">
  <div class="logo">My App</div>
  <div class="nav">
    <div class="nav-item">Home</div>
    <div class="nav-item">About</div>
  </div>
</div>
<div class="main">
  <div class="content">
    <div class="title">Welcome</div>
    <div class="text">Some content here</div>
  </div>
</div>
```

### After: Semantic HTML Structure
```html
<!-- Good: Proper semantic elements -->
<header>
  <h1>My App</h1>
  <nav aria-label="Main navigation">
    <ul>
      <li><a href="#home">Home</a></li>
      <li><a href="#about">About</a></li>
    </ul>
  </nav>
</header>
<main>
  <article>
    <h2>Welcome</h2>
    <p>Some content here</p>
  </article>
</main>
```

### ARIA Label Implementation
```javascript
// Before: Missing accessibility
function CustomButton({ onClick, children }) {
  return (
    <div onClick={onClick} className="custom-button">
      {children}
    </div>
  );
}

// After: Proper accessibility
function CustomButton({ onClick, children, ariaLabel }) {
  return (
    <button
      onClick={onClick}
      className="custom-button"
      aria-label={ariaLabel}
      type="button"
    >
      {children}
    </button>
  );
}

// Usage
<CustomButton
  onClick={handleAction}
  ariaLabel="Save your changes"
>
  Save
</CustomButton>
```

## üìä Accessibility Metrics

### Current Compliance
- **WCAG 2.1 AA**: 42% compliant
- **Semantic HTML**: 25% proper usage
- **Keyboard Navigation**: 30% functional
- **Screen Reader Support**: 35% compatible

### Target Compliance
- **WCAG 2.1 AA**: 95% compliant
- **Semantic HTML**: 100% proper usage
- **Keyboard Navigation**: 100% functional
- **Screen Reader Support**: 95% compatible

## üéØ Remediation Strategy

1. **Immediate Fixes**: Semantic HTML and basic keyboard navigation
2. **Short-term**: ARIA implementation and color contrast fixes
3. **Medium-term**: Comprehensive screen reader testing
4. **Ongoing**: Accessibility maintenance and monitoring

---
*Accessibility Audit by üîç AI Webapp Reviewer*
    ]]></sample_output>
  </example>
</examples>