<![CDATA[<tool_usage_guide>
  <tool_priorities>
    <priority level="1">
      <tool>codebase_search</tool>
      <when>Always use first to find relevant code</when>
      <why>Semantic search finds functionality better than keywords</why>
    </priority>
    <priority level="2">
      <tool>read_file</tool>
      <when>After identifying files with codebase_search</when>
      <why>Get full context of implementations</why>
    </priority>
    <priority level="3">
      <tool>list_files</tool>
      <when>To understand project structure</when>
      <why>Helps navigate the file system efficiently</why>
    </priority>
  </tool_priorities>

  <tool_specific_guidance>
    <tool name="apply_diff">
      <best_practices>
        <practice>Always read file first to ensure exact content match</practice>
        <practice>Make multiple changes in one diff when possible</practice>
        <practice>Include line numbers for accuracy</practice>
        <practice>Verify component imports and exports match</practice>
        <practice>Ensure Tailwind classes are properly applied</practice>
        <practice>Check that shadcn/ui components are correctly imported</practice>
      </best_practices>
      <example><![CDATA[
<apply_diff>
<path>src/components/Button.tsx</path>
<diff>
import * as React from 'react';

interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, ...props }, ref) => {
    return (
      <button
        className={`inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none ${className}`}
        ref={ref}
        {...props}
      />
    );
  }
);
Button.displayName = 'Button';

export { Button };
</diff>
</apply_diff>
      ]]></example>
    </tool>

    <tool name="ask_followup_question">
      <best_practices>
        <practice>Provide 2-4 specific, actionable suggestions</practice>
        <practice>Order suggestions by likelihood or importance</practice>
        <practice>Make suggestions complete (no placeholders)</practice>
        <practice>Include code examples when relevant</practice>
        <practice>Consider accessibility and performance implications</practice>
      </best_practices>
      <example><![CDATA[
<ask_followup_question>
<question>What type of form component would you like to create?</question>
<follow_up>
<suggest>A login form with email and password fields, including validation and error handling</suggest>
<suggest>A registration form with name, email, password, and confirmation fields</suggest>
<suggest>A contact form with name, email, subject, and message fields</suggest>
<suggest>A profile update form with various personal information fields</suggest>
</follow_up>
</ask_followup_question>
      ]]></example>
    </tool>

    <tool name="create_directory">
      <best_practices>
        <practice>Use kebab-case for directory names</practice>
        <practice>Create directories that match component structure</practice>
        <practice>Group related components together</practice>
        <practice>Follow established project conventions</practice>
      </best_practices>
      <example><![CDATA[
<create_directory>
<path>src/components/ui</path>
</create_directory>
      ]]></example>
    </tool>

    <tool name="write_to_file">
      <best_practices>
        <practice>Use proper file extensions (.tsx for React components)</practice>
        <practice>Follow established naming conventions (PascalCase for components)</practice>
        <practice>Include appropriate TypeScript interfaces</practice>
        <practice>Use Tailwind CSS utility classes for styling</practice>
        <practice>Import shadcn/ui components correctly</practice>
        <practice>Add JSDoc comments for complex components</practice>
      </best_practices>
      <example><![CDATA[
<write_to_file>
<path>src/components/ui/card.tsx</path>
<content><![CDATA[
import * as React from 'react';

import { cn } from '@/lib/utils';

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      'rounded-lg border bg-card text-card-foreground shadow-sm',
      className
    )}
    {...props}
  />
));
Card.displayName = 'Card';

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn('flex flex-col space-y-1.5 p-6', className)}
    {...props}
  />
));
CardHeader.displayName = 'CardHeader';

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      'text-2xl font-semibold leading-none tracking-tight',
      className
    )}
    {...props}
  />
));
CardTitle.displayName = 'CardTitle';

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn('text-sm text-muted-foreground', className)}
    {...props}
  />
));
CardDescription.displayName = 'CardDescription';

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn('p-6 pt-0', className)} {...props} />
));
CardContent.displayName = 'CardContent';

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn('flex items-center p-6 pt-0', className)}
    {...props}
  />
));
CardFooter.displayName = 'CardFooter';

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent };
]]>